@using Santase.Logic.Players
@using Santase.AI.SmartPlayer
@using Santase.Logic.Extensions
<ContentView>
    <StackLayout Margin="new Thickness(10)">
        <Frame BackgroundColor="Color.LightBlue">
            <StackLayout Orientation="StackOrientation.Horizontal" HorizontalOptions="LayoutOptions.FillAndExpand">
                <Label Text="Santase 1.0" FontAttributes="FontAttributes.Bold" HorizontalOptions="LayoutOptions.FillAndExpand" VerticalTextAlignment="TextAlignment.Center" />
                <Label Text="@($@"Games{Environment.NewLine}  {this.Player.MyGamePoints}-{this.Player.OpponentGamePoints}")" HorizontalOptions="LayoutOptions.FillAndExpand" FontAttributes="FontAttributes.Bold" VerticalTextAlignment="TextAlignment.Center" />
                <Label Text="@($@"Rounds{Environment.NewLine}  {this.Player.MyTotalPoints}-{this.Player.OpponentTotalPoints}")" HorizontalOptions="LayoutOptions.FillAndExpand" FontAttributes="FontAttributes.Bold" VerticalTextAlignment="TextAlignment.Center" />
                <Label Text="@($@"Points{Environment.NewLine}  {this.Player.MyRoundPoints}-{this.Player.OpponentRoundPoints}")" HorizontalOptions="LayoutOptions.FillAndExpand" FontAttributes="FontAttributes.Bold" VerticalTextAlignment="TextAlignment.Center" />
            </StackLayout>
        </Frame>
        <StackLayout Orientation="StackOrientation.Horizontal" HorizontalOptions="LayoutOptions.FillAndExpand">
            @if (this.PlayerCards != null)
            {
                foreach (var card in this.PlayerCards)
                {
                    <CardImage />
                }
            }
        </StackLayout>

        <StackLayout Orientation="StackOrientation.Horizontal">
            <StackLayout Orientation="StackOrientation.Horizontal">
                @if (this.Player.TrumpCard != null)
                {
                    <CardImage OnClick="CloseGame"/>
                    <CardImage Card="this.Player.TrumpCard" OnClick="ChangeTrump"/>
                }
                else
                {
                    <CardImage Hidden="true"/>
                }
                <CardImage Hidden="true"/>
                <StackLayout Orientation="StackOrientation.Vertical" HorizontalOptions="LayoutOptions.EndAndExpand">
                    @if (this.SecondPlayerCurrentCard != null)
                    {
                        <CardImage Card="SecondPlayerCurrentCard"/>
                    }
                    <CardImage Hidden="true"/>
                </StackLayout>
            </StackLayout>

            <StackLayout Orientation="StackOrientation.Vertical" HorizontalOptions="LayoutOptions.EndAndExpand">
                <CardImage Card="SecondPlayerLastCard" />
                <CardImage Card="FirstPlayerLastCard" />
            </StackLayout>
        </StackLayout>
        <StackLayout Orientation="StackOrientation.Horizontal">
            @if (this.PlayerCards != null)
            {
                foreach (var card in this.PlayerCards)
                {
                    <CardImage Card="card" OnClick="() => CardClick(card)" />
                }
            }
        </StackLayout>

        @*<Counter/>*@
    </StackLayout>
</ContentView>

@code
{
    public SantaseGame Game { get; set; }

    public UiPlayer Player { get; set; }

    public IEnumerable<Card> PlayerCards { get; set; }

    public Card FirstPlayerLastCard { get; set; }

    public Card SecondPlayerLastCard { get; set; }

    public Card SecondPlayerCurrentCard { get; set; }

    protected override void OnInitialized()
    {
        this.Player = new UiPlayer();
        this.Player.RedrawPlayedCards += (sender, tuple) =>
        {
            this.FirstPlayerLastCard = tuple.Item1;
            this.SecondPlayerLastCard = tuple.Item2;
        };
        this.Player.RedrawOtherPlayerAction += (sender, tuple) =>
        {
            this.SecondPlayerCurrentCard = tuple.Item1;
        };
        this.Player.RedrawCards += (sender, cards) =>
        {
            this.PlayerCards =
                cards.OrderBy(x => x.Suit.MapAsSortableByColor())
                    .ThenByDescending(x => x.GetValue())
                    .ToList();
        };
        this.Game = new SantaseGame(this.Player, new SmartPlayer());
        Task.Run(() => this.Game.Start());
    }

    private void CardClick(Card card)
    {
        if (card == null)
        {
            return;
        }

        this.Player.Action(PlayerAction.PlayCard(card));
    }

    private void ChangeTrump()
    {
        this.Player.Action(PlayerAction.ChangeTrump());
    }

    private void CloseGame()
    {
        this.Player.Action(PlayerAction.CloseGame());
    }
}
